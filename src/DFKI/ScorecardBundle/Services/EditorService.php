<?php
/*
 * Copyright 2015 Deutsches Forschungszentrum f�r K�nstliche Intelligenz
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *  http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * @author Jan Nehring <jan.nehring@dfki.de>
 */
namespace DFKI\ScorecardBundle\Services;

use DFKI\ScorecardBundle\Entity\Project;
use DFKI\ScorecardBundle\DFKIScorecardBundle;
use Doctrine\ORM\EntityManager;

class EditorService {
	protected $em;
	public function __construct(EntityManager $entityManager) {
		$this->em = $entityManager;
	}
	
	/**
	 * get all issue reports assigned to this project
	 *
	 * @param Project $project        	
	 * @return \Doctrine\ORM\array
	 */
	public function getIssueReports(Project $project) {
		$issueReports = $this->em->createQuery ( "SELECT ir FROM DFKIScorecardBundle:IssueReport ir, DFKIScorecardBundle:Segment s 
			WHERE s.project = :project AND ir.segment=s.id ORDER BY ir.issue")->setParameter ( "project", $project )->getResult ();
		return $issueReports;
	}
	
	/**
	 * calculate score of project.
	 * returns array with fields "sourceScore", "targetScore", "compositeScore"
	 *
	 * @param unknown $project        	
	 * @throws \Exception
	 * @return multitype:number
	 */
	public function getProjectScore($project) {
		$reports = $this->getIssueReports ( $project );
		$targetPenalty = 0;
		$sourcePenalty = 0;
		
		$reports_hash = array();
		
		foreach ($reports as $report) {
			if (!array_key_exists($report->getIssue()->getName(), $reports_hash))
			{
				$reports_hash[$report->getIssue()->getName()] = array ();
				$reports_hash[$report->getIssue()->getName()]['data'] = array($report);
				$reports_hash[$report->getIssue()->getName()]['minor'] = 0;
				$reports_hash[$report->getIssue()->getName()]['major'] = 0;
				$reports_hash[$report->getIssue()->getName()]['critical'] = 0;
			} else {
				array_push($reports_hash[$report->getIssue()->getName()]['data'], $report);
			}
			
			$reports_hash[$report->getIssue()->getName()][$report->getSeverity()] += 1; 
		}
		$APT = 0;
		
		$severity_minor = 1;
		$severity_major = 5;
		$severity_critical = 25;
		
		foreach (array_keys($reports_hash) as $r) {
			$reports_hash[$r]['ETPTi'] = 0;
			foreach ($reports_hash[$r]['data'] as $report){
			
			//Error Type penalty total for error type I
			$reports_hash[$r]['ETPTi'] += ( $reports_hash[$r]['minor']*$severity_minor +
					$reports_hash[$r]['major']*$severity_major +
					$reports_hash[$r]['critical']*$severity_critical
					) * $report->getIssueProjectMapping()->getWeight();
			}
			$APT += $reports_hash[$r]['ETPTi'];
		}
		
		$EWC = $project->getTargetWords();
		$RWC = $project->getSourceWords();
		$PS = 1.0;
		
		$ONPT = ($APT / $EWC) * ($RWC * $PS);
		$OQF = 1 - ($ONPT / $RWC);
		
		$MSV = 100;
		$OQS = $OQF * $MSV;
		
		return array (
			"OverallQualityScore" => $OQS
		);
	}
	
	/**
	 * Create a grid of issues
	 * 
	 * @param array $issues an array of parameters as generated by ProjectService::getProjectIssues()
	 */
	public function createIssueGrid( $issues ){
		
		$gridWidth = 6;
		$nColors = 6;
		
		// convert $issues to flat list and add background color and type information
		$flatlist = array();
		for( $i=0; $i<sizeof($issues); $i++ ){
			for( $j=0; $j<sizeof( $issues[$i] ); $j++ ){
				$issue = $issues[$i][$j];
				if( $issue["display"] == false ){
					continue;
				}
				$issue["bg"] = $i % $nColors;
				$issue["type"] = "issue";
				$flatlist[] = $issue;
			}
		}
		
		// create raw grid without the header rows
		$rawGrid = array();
		for( $i=0; $i<sizeof( $flatlist ); $i++ ){
			$rowIndex = floor($i / $gridWidth);
			
			if( empty($rawGrid[$rowIndex]) ){
				$rawGrid[$rowIndex] = array();
			}
			$rawGrid[$rowIndex][] = $flatlist[$i];
		}
		
		// create new grid including raw grid and header rows
		$grid = array();
		$currentBg = -1;
		$currentHeader = array();
		for( $i=0; $i<sizeof( $rawGrid ); $i++ ){
			for( $j=0; $j<sizeof($rawGrid[$i]); $j++){
				if( $rawGrid[$i][$j]["bg"] != $currentBg ){
					$currentBg = $rawGrid[$i][$j]["bg"];
					// add header
					while(sizeof( $currentHeader ) < $j ){
						$currentHeader[] = array("type" => "blank");
					}
					$currentHeader[] = array("type" => "heading", "name" => $rawGrid[$i][$j]["name"]);
				}
			}
			if( sizeof( $currentHeader ) > 0 ){
				$grid[] = $currentHeader;
			}
			$currentHeader = array();
			$grid[] = $rawGrid[$i];
		}
		
		// debugging output
// 		foreach( $grid as $row ){
// 			foreach( $row as $cell ){
// 				if( $cell["type"] == "issue" ){
// 					echo $cell["bg"]." ".$cell["name"]."&nbsp;&nbsp;&nbsp;";
// 				} else if( $cell["type"] == "blank" ){
// 					echo "&nbsp;-&nbsp;|";
// 				} else{
// 					echo $cell["name"]."|";
// 				}
// 			}
// 			echo '<br>------------------<br>';
// 		}
// 		exit;
		return $grid;
	}
}